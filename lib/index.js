// Generated by CoffeeScript 1.4.0
var get, set;

get = Em.get;

set = Em.set;

module.exports = Em.Mixin.create({
  template: Em.Handlebars.compile(''),
  init: function() {
    /*
          if @isInline, make view as contenteditable,
          else make view as textarea
    */

    var isInline, properties;
    isInline = get(this, 'isInline');
    if (isInline === true) {
      properties = {
        attributeBindings: ['contenteditable'],
        contenteditable: 'true'
      };
    } else {
      properties = {
        tagName: 'textarea',
        classNames: ['ckeditor'],
        attributeBindings: ['name'],
        nameBinding: 'elementId'
      };
    }
    this.setProperties(properties);
    return this._super();
  },
  didInsertElement: function() {
    var abspath, editor, elementId, isInline, lastSlash, path;
    this._super();
    path = document.location.pathname;
    lastSlash = path.lastIndexOf('/') + 1;
    abspath = path.substring(0, lastSlash);
    window.CKEDITOR_BASEPATH = "" + abspath + "build/kelonye-ember-ckedit/ckeditor/";
    require('../ckeditor/ckeditor');
    isInline = get(this, 'isInline');
    elementId = get(this, 'elementId');
    if (isInline === true) {
      CKEDITOR.disableAutoInline = true;
      editor = CKEDITOR.inline(elementId);
    } else {
      editor = CKEDITOR.replace(elementId);
    }
    set(this, 'editor', editor);
    this.addObserver('value', function() {
      return this.updateEditor();
    });
    this.updateEditor();
    editor.on('focus', function() {
      return this.updateContext();
    }, this);
    editor.on('blur', function() {
      return this.updateContext();
    }, this);
    return editor.on('key', function() {
      return this.updateContext();
    }, this);
  },
  willDestroyElement: function() {
    var editor;
    editor = get(this, 'editor');
    if (editor != null) {
      editor.destroy(true);
    }
    return this.removeObserver('value');
  },
  updateEditor: function() {
    var editor, value;
    value = get(this, 'value');
    editor = get(this, 'editor');
    return editor.setData(value);
  },
  updateContext: function() {
    var editor, value;
    editor = get(this, 'editor');
    value = editor.getData();
    return set(this, 'value', value);
  }
});
