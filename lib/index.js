// Generated by CoffeeScript 1.4.0
var get, set;

get = Em.get;

set = Em.set;

module.exports = Em.Mixin.create({
  init: function() {
    var inline, props;
    inline = get(this, "inline");
    if (inline === true) {
      props = {
        attributeBindings: ["contenteditable"],
        contenteditable: "true"
      };
    } else {
      props = {
        tagName: "textarea",
        classNames: ["ckeditor"],
        attributeBindings: ["name"],
        nameBinding: "elementId"
      };
    }
    this.setProperties(props);
    return this._super();
  },
  template: Em.Handlebars.compile(""),
  didInsertElement: function() {
    var abspath, content, editor, elementId, inline, lastSlash, path, that, update;
    this._super();
    path = document.location.pathname;
    lastSlash = path.lastIndexOf("/") + 1;
    abspath = path.substring(0, lastSlash);
    window.CKEDITOR_BASEPATH = "" + abspath + "build/kelonye-ember-ckedit/ckeditor/";
    require("../ckeditor/ckeditor");
    that = this;
    inline = get(this, "inline");
    elementId = get(that, "elementId");
    if (inline === true) {
      CKEDITOR.disableAutoInline = true;
      editor = CKEDITOR.inline(elementId);
    } else {
      editor = CKEDITOR.replace(elementId);
    }
    content = get(that, "content");
    editor.setData(content);
    set(that, "editor", editor);
    update = function() {
      var e;
      e = get(that, "editor");
      content = e.getData();
      return set(that, "content", content);
    };
    editor.on("focus", function() {
      return update();
    });
    editor.on("blur", function() {
      return update();
    });
    return editor.on("key", function() {
      return update();
    });
  },
  willDestroyElement: function() {
    var editor;
    editor = get(this, "editor");
    return editor != null ? editor.destroy(true) : void 0;
  }
});
